name: cyanase_ipa

on:
  workflow_dispatch:

jobs:
  build-ios:
    name: 🚀 Build iOS Test IPA (No Signing)
    runs-on: macos-14

    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: 💙 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'
          channel: stable
          architecture: x64

      - name: 📦 Cache Flutter and Pods
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ios/Pods
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

      - name: ✅ Validate Xcode Project
        run: xcodebuild -project ios/Runner.xcodeproj -list

      - name: 🧹 Clean and Get Packages
        run: |
          flutter clean
          flutter pub get
          flutter precache --ios

      - name: 🔧 Set up Flutter Framework
        run: |
          cd ios
          # Create Flutter directory if it doesn't exist
          mkdir -p Flutter
          
          # Copy Flutter framework files
          FLUTTER_ROOT=$(dirname $(which flutter))/..
          cp -r "$FLUTTER_ROOT/packages/flutter_tools/templates/ios/Flutter/"* Flutter/
          
          # Ensure Flutter.h exists
          if [ ! -f "Flutter/Flutter.h" ]; then
            echo "Creating Flutter.h"
            cat > Flutter/Flutter.h << 'EOL'
#ifndef FLUTTER_FLUTTER_H_
#define FLUTTER_FLUTTER_H_

#import <Foundation/Foundation.h>

@protocol FlutterPlugin;
@class FlutterPluginRegistrar;

NS_ASSUME_NONNULL_BEGIN

@interface FlutterPlugin : NSObject
+ (void)registerWithRegistrar:(NSObject<FlutterPluginRegistrar>*)registrar;
@end

@protocol FlutterPluginRegistrar
- (void)addMethodCallDelegate:(id<FlutterPlugin>)delegate channel:(id)channel;
@end

NS_ASSUME_NONNULL_END

#endif  // FLUTTER_FLUTTER_H_
EOL
          fi
          
          # Ensure Flutter.framework exists
          if [ ! -d "Flutter/Flutter.framework" ]; then
            echo "Creating Flutter.framework structure"
            mkdir -p Flutter/Flutter.framework/Headers
            cp Flutter/Flutter.h Flutter/Flutter.framework/Headers/
          fi
          
          cd ..

      - name: 🍎 Install CocoaPods
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: 🔧 Ensure Bridging Header Exists
        run: |
          cd ios
          # Create bridging header with all necessary imports
          echo '#import "GeneratedPluginRegistrant.h"' > Runner/Runner-Bridging-Header.h
          echo '#import "Flutter/Flutter.h"' >> Runner/Runner-Bridging-Header.h
          echo '#import "Flutter/FlutterPlugin.h"' >> Runner/Runner-Bridging-Header.h
          echo '#import "Flutter/FlutterPluginRegistrar.h"' >> Runner/Runner-Bridging-Header.h
          
          # Ensure GeneratedPluginRegistrant.h exists
          if [ ! -f "Runner/GeneratedPluginRegistrant.h" ]; then
            echo '#import <Flutter/Flutter.h>' > Runner/GeneratedPluginRegistrant.h
            echo '@interface GeneratedPluginRegistrant : NSObject' >> Runner/GeneratedPluginRegistrant.h
            echo '+ (void)registerWithRegistry:(NSObject<FlutterPluginRegistry>*)registry;' >> Runner/GeneratedPluginRegistrant.h
            echo '@end' >> Runner/GeneratedPluginRegistrant.h
          fi
          cd ..

      - name: 🚫 Disable User Script Sandboxing
        run: |
          cd ios
          awk '/buildSettings = {/ {print; print "\t\t\t\tENABLE_USER_SCRIPT_SANDBOXING = NO;"; next}1' Runner.xcodeproj/project.pbxproj > temp.pbxproj
          mv temp.pbxproj Runner.xcodeproj/project.pbxproj
          cd ..

      - name: ❌ Disable Code Signing & Bitcode
        run: |
          cd ios
          awk '/buildSettings = {/ {
            print;
            print "\t\t\t\tCODE_SIGN_STYLE = Manual;";
            print "\t\t\t\tCODE_SIGN_IDENTITY = \"\";";
            print "\t\t\t\tDEVELOPMENT_TEAM = \"\";";
            print "\t\t\t\tPROVISIONING_PROFILE_SPECIFIER = \"\";";
            print "\t\t\t\tENABLE_BITCODE = NO;";
            next
          }1' Runner.xcodeproj/project.pbxproj > temp.pbxproj
          mv temp.pbxproj Runner.xcodeproj/project.pbxproj
          cd ..

      - name: 🔨 Force Disable BUILD_LIBRARY_FOR_DISTRIBUTION in Xcode Project
        run: |
          cd ios
          sed -i '' '/BUILD_LIBRARY_FOR_DISTRIBUTION/d' Runner.xcodeproj/project.pbxproj
          cd ..

      - name: 🧹 Disable Swift Module Interface & Defines Module
        run: |
          cd ios
          sed -i '' '/SWIFT_INTERFACE_GENERATION_MODE/d' Runner.xcodeproj/project.pbxproj
          sed -i '' '/DEFINES_MODULE = YES;/d' Runner.xcodeproj/project.pbxproj
          cd ..

      - name: 🔓 Set Permissions
        run: chmod -R u+rw ios

      - name: 🛠 Set Writable Derived Data Path
        run: |
          mkdir -p ${{ github.workspace }}/build/ios_derived
          echo "XCODE_DERIVED_DATA_PATH=${{ github.workspace }}/build/ios_derived" >> $GITHUB_ENV

      - name: 📦 Build Unsigned IPA
        run: |
          set -euo pipefail
          flutter build ipa --release --no-codesign --verbose

      - name: 🧪 List Build Folder (Debugging)
        run: |
          echo "🔍 Listing all contents of build/ios:"
          find build/ios

      - name: 📄 Rename IPA for Release Upload
        run: |
          mkdir -p release-artifacts
          IPA_PATH=$(find build/ios -type f -name "*.ipa" | head -n 1)
          if [ -z "$IPA_PATH" ]; then
            echo "❌ No IPA found. Here's what was built:"
            find build
            exit 1
          fi
          echo "✅ IPA found at $IPA_PATH"
          cp "$IPA_PATH" release-artifacts/cyanase_ios_unsigned.ipa

      - name: 🪄 Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          name: "Cyanase iOS Release"
          tag_name: "ios-${{ github.run_number }}"
          files: release-artifacts/cyanase_ios_unsigned.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload IPA Artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: cyanase_ios_ipa_unsigned
          path: release-artifacts/cyanase_ios_unsigned.ipa
